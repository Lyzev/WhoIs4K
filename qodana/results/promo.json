{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Cannot resolve symbol 'jsonObject'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 18,
      "length": 10,
      "code": {
        "startLine": 45,
        "length": 10,
        "offset": 111,
        "surroundingCode": "         * Creates a new instance of [WhoIsResponse] from the given [JsonObject].\n         *\n         * @param jsonObject the JSON object\n         * @return the new instance\n         */"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "3525753297987523477"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'domain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 8,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 53,
        "surroundingCode": " */\nclass WhoIsResponse private constructor(\n    val domain: String,\n    val registryDomainID: String,\n    val updatedDate: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9103377603356490830"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'registryDomainID' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 8,
      "length": 16,
      "code": {
        "startLine": 22,
        "length": 16,
        "offset": 73,
        "surroundingCode": "class WhoIsResponse private constructor(\n    val domain: String,\n    val registryDomainID: String,\n    val updatedDate: String,\n    val creationDate: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3530453325131640286"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'updatedDate' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 8,
      "length": 11,
      "code": {
        "startLine": 23,
        "length": 11,
        "offset": 66,
        "surroundingCode": "    val domain: String,\n    val registryDomainID: String,\n    val updatedDate: String,\n    val creationDate: String,\n    val referralURL: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5929223279029869049"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'creationDate' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 8,
      "length": 12,
      "code": {
        "startLine": 24,
        "length": 12,
        "offset": 71,
        "surroundingCode": "    val registryDomainID: String,\n    val updatedDate: String,\n    val creationDate: String,\n    val referralURL: String,\n    val registrar: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "-2397226204370687665"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'referralURL' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 8,
      "length": 11,
      "code": {
        "startLine": 25,
        "length": 11,
        "offset": 67,
        "surroundingCode": "    val updatedDate: String,\n    val creationDate: String,\n    val referralURL: String,\n    val registrar: String,\n    val registrant: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3422408632764059466"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'registrar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 8,
      "length": 9,
      "code": {
        "startLine": 26,
        "length": 9,
        "offset": 67,
        "surroundingCode": "    val creationDate: String,\n    val referralURL: String,\n    val registrar: String,\n    val registrant: String,\n    val admin: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4914069102828716030"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'registrant' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 8,
      "length": 10,
      "code": {
        "startLine": 27,
        "length": 10,
        "offset": 64,
        "surroundingCode": "    val referralURL: String,\n    val registrar: String,\n    val registrant: String,\n    val admin: String,\n    val tech: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6445141346285321354"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'admin' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 8,
      "length": 5,
      "code": {
        "startLine": 28,
        "length": 5,
        "offset": 63,
        "surroundingCode": "    val registrar: String,\n    val registrant: String,\n    val admin: String,\n    val tech: String,\n    val nameservers: List<String>,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7745628322976563316"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'tech' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 29,
        "length": 4,
        "offset": 59,
        "surroundingCode": "    val registrant: String,\n    val admin: String,\n    val tech: String,\n    val nameservers: List<String>,\n    val lastWhoisDatabaseUpdate: String,"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "-6379167408493762559"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'nameservers' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 8,
      "length": 11,
      "code": {
        "startLine": 30,
        "length": 11,
        "offset": 53,
        "surroundingCode": "    val admin: String,\n    val tech: String,\n    val nameservers: List<String>,\n    val lastWhoisDatabaseUpdate: String,\n    val rawResponse: String"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8802539892254256651"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'lastWhoisDatabaseUpdate' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 8,
      "length": 23,
      "code": {
        "startLine": 31,
        "length": 23,
        "offset": 65,
        "surroundingCode": "    val tech: String,\n    val nameservers: List<String>,\n    val lastWhoisDatabaseUpdate: String,\n    val rawResponse: String\n) {"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "-7658548801078926785"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'rawResponse' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/whois/response/WhoIsResponse.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 8,
      "length": 11,
      "code": {
        "startLine": 32,
        "length": 11,
        "offset": 84,
        "surroundingCode": "    val nameservers: List<String>,\n    val lastWhoisDatabaseUpdate: String,\n    val rawResponse: String\n) {\n"
      }
    }
  ],
  "attributes": {
    "module": "WhoIs4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2277296182423415275"
}]}